// Generated by CoffeeScript 1.9.3
var File, async;

async = require('async');

File = require('../models/file');

module.exports = function(log, model, suffix, tags) {
  return function(requiredFields, entries, body, next) {
    if (entries.filtered == null) {
      entries.filtered = entries.fetched;
    }
    return async.eachSeries(entries.filtered, function(entry, callback) {
      var createFileAndSaveData, entryLabel, onCreated, saveEntry;
      entryLabel = entry.date.format('MMYYYY');
      createFileAndSaveData = function(entry, entryLabel) {
        var date, fileName, path, pdfurl;
        fileName = (entry.date.format('YYYYMM')) + "_" + suffix + ".pdf";
        date = entry.date;
        pdfurl = entry.pdfurl;
        path = requiredFields.folderPath;
        return File.createNew(fileName, path, date, pdfurl, tags, onCreated);
      };
      onCreated = function(err, file) {
        if (err) {
          log.raw(err);
          log.info("File for " + entryLabel + " not created.");
          return callback();
        } else {
          log.info("File for " + entryLabel + " created.");
          entry.fileId = file.id;
          entry.binaryId = file.binary.file.id;
          return saveEntry(entry, entryLabel);
        }
      };
      saveEntry = function(entry, entryLabel) {
        return model.create(entry, function(err) {
          if (err) {
            log.raw(err);
            log.error("entry for " + entryLabel + " not saved.");
          } else {
            log.info("entry for " + entryLabel + " saved.");
          }
          return callback();
        });
      };
      log.info("import for entry " + entryLabel + " started.");
      if (entry.pdfurl != null) {
        return createFileAndSaveData(entry, entryLabel);
      } else {
        log.info("No file to download for " + entryLabel + ".");
        return saveEntry(entry, entryLabel);
      }
    }, function(err) {
      return next();
    });
  };
};
