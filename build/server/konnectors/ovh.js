// Generated by CoffeeScript 1.9.3
var InternetBill, americano, async, fetcher, filterExisting, findBills, linkBankOperation, localization, log, moment, saveDataAndFile;

americano = require('americano-cozy');

moment = require('moment');

async = require('async');

fetcher = require('../lib/fetcher');

filterExisting = require('../lib/filter_existing');

saveDataAndFile = require('../lib/save_data_and_file');

linkBankOperation = require('../lib/link_bank_operation');

localization = require('../lib/localization_manager');

log = require('printit')({
  prefix: "OVH",
  date: true
});

InternetBill = americano.getModel('InternetBill', {
  date: Date,
  vendor: String,
  amount: Number,
  fileId: String
});

InternetBill.all = function(callback) {
  return InternetBill.request('byDate', callback);
};

module.exports = {
  name: "OVH",
  slug: "ovh",
  description: 'konnector description ovh',
  vendorLink: "https://www.ovh.com/",
  fields: {
    endpoint: "text",
    appKey: "text",
    appSecret: "password",
    consumerKey: "text",
    folderPath: "folder"
  },
  models: {
    internetbill: InternetBill
  },
  init: function(callback) {
    var map;
    map = function(doc) {
      return emit(doc.date, doc);
    };
    return InternetBill.defineRequest('byDate', map, function(err) {
      return callback(err);
    });
  },
  fetch: function(requiredFields, callback) {
    log.info("Import started");
    return fetcher["new"]().use(findBills).use(filterExisting(log, InternetBill)).use(saveDataAndFile(log, InternetBill, 'ovh', ['facture'])).use(linkBankOperation({
      log: log,
      model: InternetBill,
      identifier: 'ovh',
      dateDelta: 4,
      amountDelta: 5
    })).args(requiredFields, {}, {}).fetch(function(err, fields, entries) {
      var localizationKey, notifContent, options, ref;
      log.info("Import finished");
      notifContent = null;
      if ((entries != null ? (ref = entries.filtered) != null ? ref.length : void 0 : void 0) > 0) {
        localizationKey = 'notification ovh';
        options = {
          smart_count: entries.filtered.length
        };
        notifContent = localization.t(localizationKey, options);
      }
      return callback(err, notifContent);
    });
  }
};

findBills = function(requiredFields, bills, data, next) {
  var ovh;
  bills.fetched = [];
  ovh = require('ovh')({
    endpoint: requiredFields.endpoint,
    appKey: requiredFields.appKey,
    appSecret: requiredFields.appSecret,
    consumerKey: requiredFields.consumerKey
  });
  return ovh.request('GET', '/me/bill', function(error, billList) {
    if (error) {
      next(error);
    }
    return async.map(billList, (function(bill, callback) {
      return ovh.request('GET', '/me/bill/' + bill, callback);
    }), function(error, billList) {
      if (error) {
        next(error);
      }
      billList.forEach(function(bill) {
        var amount, date, pdf;
        date = moment.utc(bill.date);
        amount = bill.priceWithTax.value;
        pdf = bill.pdfUrl;
        log.info("date: " + date);
        log.info("amount: " + amount);
        log.info("pdf: " + pdf);
        return bills.fetched.push({
          date: date,
          amount: amount,
          pdfurl: pdf
        });
      });
      if (bills.fetched.length === 0) {
        log.error("No bills retrieved");
        return next('no bills retrieved');
      } else {
        log.info("bills length: " + bills.fetched.length);
        return next();
      }
    });
  });
};
